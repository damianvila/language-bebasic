'scopeName': 'source.bebasic'
'name': 'Basic Engine BASIC'
'fileTypes': ['bas', 'basic']
'patterns': [
  { # lines that do not begin with a line number are marked invalid
    'match': '^\\D+'
    'name': 'invalid.illegal.bebasic'
  }
  { # numeric constants, which may include scientific notation
    'match': '(^\\d+)|(\\b(([0-9]+(\\.|\\s*E\\s*)?[0-9]*)|(\\.[0-9]+))\\b)'
    'captures':
      '1':
        'name': 'markup.bold.bebasic'
      '2':
        'name': 'constant.numeric.bebasic'
    'name': 'meta.constant.bebasic'
  }
  { # strings
    'match': '(")([^"]*(")|.*\\n|.*$)'
    'captures':
      '1':
        'name': 'punctuation.definition.string.begin.bebasic'
      '2':
        'name': 'string.quoted.double.bebasic'
      '3':
        'name': 'punctuation.definition.string.begin.bebasic'
    'name': 'meta.string.quoted.double.bebasic'
  }
  { # operators
    'match': ':|;|=|\\+|-|\\*|/|\\^|\\?|!|\\[|\\]|"|&|<|>|\\\\|@|_'
    'name': 'keyword.operator.bebasic'
  }
  { # AND operator
    'match': '\\b(AND)'
    'name': 'keyword.operator.bebasic'
  }
  { # EOR operator
    'match': '\\b(EOR)'
    'name': 'keyword.operator.bebasic'
  }
  { # MOD operator
    'match': '\\b(MOD)'
    'name': 'keyword.operator.bebasic'
  }
  { # NOT operator
    'match': '\\b(NOT)'
    'name': 'keyword.operator.bebasic'
  }
  { # OR operator
    'match': '\\b(OR)'
    'name': 'keyword.operator.bebasic'
  }
  # { # functions without arguments are invalid
  #   'match': '\\b([A-Z]+\\$?)\\s*\\(\\)'
  #   'name': 'invalid.illegal.bebasic'
  # }
  { # ABS function
    'match': '\\b(ABS)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # ANA function
    'match': '\\b(ANA)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # APPEND function
    'match': '\\b(APPEND)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # ARG function
    'match': '\\b(ARG(\\$|C)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # ATN function
    'match': '\\b(ATN(2)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # BEEP function
    'match': '\\b(BEEP)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # BG function
    'match': '\\b(BG)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # BIN$ function
    'match': '\\b(BIN(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # BLIT function
    'match': '\\b(BLIT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # BLOAD function
    'match': '\\b(BLOAD)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # BOOT function
    'match': '\\b(BOOT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # BORDER function
    'match': '\\b(BORDER)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # BSAVE function
    'match': '\\b(BSAVE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # BSCR function
    'match': '\\b(BSCR(X|Y))\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CALL function
    'match': '\\b(CALL)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CHAIN function
    'match': '\\b(CHAIN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CHAR function
    'match': '\\b(CHAR)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CHR$ function
    'match': '\\b(CHR(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # CHDIR function
    'match': '\\b(CHDIR)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # CIRCLE function
    'match': '\\b(CIRCLE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CLEAR function
    'match': '\\b(CLEAR)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # CLOSE function
    'match': '\\b(CLOSE)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # CLS function
    'match': '\\b(CLS)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # CMD function
    'match': '\\b(CMD)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # COLOR function
    'match': '\\b(COLOR)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # COMPARE function
    'match': '\\b(COMPARE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CONFIG function
    'match': '\\b(CONFIG( COLOR)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CONT function
    'match': '\\b(CONT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # COPY function
    'match': '\\b(COPY)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # COS function
    'match': '\\b(COS)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CREDITS function
    'match': '\\b(CREDITS)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # CSCROLL function
    'match': '\\b(CSCROLL)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CSIZE function
    'match': '\\b(CSIZE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # CWD$ function
    'match': '\\b(CWD(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # DATA function
    'match': '\\b(DATA)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # DATE function
    'match': '\\b(DATE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # DELETE function
    'match': '\\b(DELETE)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # DIM function
    'match': '\\b(DIM)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # DIR function
    'match': '\\b(DIR(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # DO function
    'match': '\\b(DO)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # EDIT function
    'match': '\\b(EDIT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # ELSE function
    'match': '\\b(ELSE)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # END function
    'match': '\\b(END(IF)?)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # EOF function
    'match': '\\b(EOF)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # ERROR function
    'match': '\\b(ERROR((\\$)?|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # EXEC function
    'match': '\\b(EXEC)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # EXP function
    'match': '\\b(EXP)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # FILES function
    'match': '\\b(FILES)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # FONT function
    'match': '\\b(FONT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # FOR function
    'match': '\\b(FOR)'
    'name': 'keyword.control.bebasic'
  }
  { # FORMAT function
    'match': '\\b(FORMAT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # FRAME function
    'match': '\\b(FRAME)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # FRAMESKIP function
    'match': '\\b(FRAMESKIP)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # FREE function
    'match': '\\b(FREE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # GET DATE TIME function
    'match': '\\b(GET( DATE| TIME))\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # GOSUB function
    'match': '\\b(GOSUB)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # GOTO function
    'match': '\\b(GOTO)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # GPIN function
    'match': '\\b(GPIN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # GPOUT function
    'match': '\\b(GPOUT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # GPRINT function
    'match': '\\b(GPRINT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # GSCROLL function
    'match': '\\b(GSCROLL)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # HEX$ function
    'match': '\\b(HEX(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # I2C(R|W) function
    'match': '\\b(I2C(R|W))\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # IF function
    'match': '\\b(IF)'
    'name': 'keyword.control.bebasic'
  }
  { # INKEY function
    'match': '\\b(INKEY(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # INPUT$ function
    'match': '\\b(INPUT(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # INST function
    'match': '\\b(INST(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # INSTR function
    'match': '\\b(INSTR)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # INT function
    'match': '\\b(INT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # KEY function
    'match': '\\b(KEY)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # LEFT$ function
    'match': '\\b(LEFT(\\$|\\b))'
    'captures':
      '1':
        'name': 'entity.other.attribute-name.bebasic'
      '2':
        'name': 'entity.name.function.bebasic'
    'name': 'meta.entity.other.attribute-name.bebasic'
  }
  { # LET function
    'match': '\\b(LET)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # LEN function
    'match': '\\b(LEN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # LINE function
    'match': '\\b(LINE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # LOAD function
    'match': '\\b(LOAD( BG| PCX)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # LOC function
    'match': '\\b(LOC)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # LOCATE function
    'match': '\\b(LOCATE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # LOF function
    'match': '\\b(LOF)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # LOG function
    'match': '\\b(LOG)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # LOOP function
    'match': '\\b(LOOP)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # MAP function
    'match': '\\b(MAP)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # MERGE function
    'match': '\\b(MERGE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # MID$ function
    'match': '\\b(MID(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # MKDIR function
    'match': '\\b(MKDIR)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # MOVE function
    'match': '\\b(MOVE( BG| SPRITE))\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # NEW function
    'match': '\\b(NEW)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # NEXT function
    'match': '\\b(NEXT)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # ON function
    'match': '\\b(ON( ERROR| GOSUB| GOTO| PAD| PLAY| SPRITE))\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # OPEN function
    'match': '\\b(OPEN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PAD function
    'match': '\\b(PAD)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PALETTE function
    'match': '\\b(PALETTE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PEEK function
    'match': '\\b(PEEK(D|W)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PLAY function
    'match': '\\b(PLAY)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PLOT function
    'match': '\\b(PLOT( MAP)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # POINT function
    'match': '\\b(POINT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # POKE function
    'match': '\\b(POKE(D|W)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # POP function
    'match': '\\b(POP(B|F)(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # POS function
    'match': '\\b(POS)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PREPEND function
    'match': '\\b(PREPEND)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PRINT function
    'match': '\\b(PRINT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PROC function
    'match': '\\b(PROC)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PROFILE function
    'match': '\\b(PROFILE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PSET function
    'match': '\\b(PSET)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # PSIZE function
    'match': '\\b(PSIZE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # READ function
    'match': '\\b(READ)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RECT function
    'match': '\\b(RECT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # REDRAW function
    'match': '\\b(REDRAW)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # REM command (comments)
    'match': '(REM.*(\\n|$))'
    'name': 'comment.line.bebasic'
  }
  { # REMOVE function
    'match': '\\b(REMOVE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RENAME function
    'match': '\\b(RENAME)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RENUM function
    'match': '\\b(RENUM)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RESTORE function
    'match': '\\b(RESTORE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RESUME function
    'match': '\\b(RESUME)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RET$ function
    'match': '\\b(RET(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # RETURN function
    'match': '\\b(RETURN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RGB function
    'match': '\\b(RGB)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RIGHT$ function
    'match': '\\b(RIGHT(\\$|\\b))'
    'captures':
      '1':
        'name': 'entity.other.attribute-name.bebasic'
      '2':
        'name': 'entity.name.function.bebasic'
    'name': 'meta.entity.other.attribute-name.bebasic'
  }
  { # RMDIR function
    'match': '\\b(RMDIR)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RND function
    'match': '\\b(RND)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # RUN function
    'match': '\\b(RUN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SAVE function
    'match': '\\b(SAVE( BG| CONFIG| PCX)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SAY function
    'match': '\\b(SAY)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SCREEN function
    'match': '\\b(SCREEN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SEEK function
    'match': '\\b(SEEK)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SET DATE function
    'match': '\\b(SET DATE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SGN function
    'match': '\\b(SGN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SIN function
    'match': '\\b(SIN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SMODE function
    'match': '\\b(SMODE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SOUND function
    'match': '\\b(SOUND( FONT)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SPR function
    'match': '\\b(SPR(COLL|X|Y))\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SPRITE function
    'match': '\\b(SPRITE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SQR function
    'match': '\\b(SQR)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SREAD function
    'match': '\\b(SREAD)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SREADY function
    'match': '\\b(SREADY)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # STOP function
    'match': '\\b(STOP)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # STR$ function
    'match': '\\b(STR(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # STRING$ function
    'match': '\\b(STRING(\\$|\\b))'
    'name': 'entity.name.function.bebasic'
  }
  { # SWRITE function
    'match': '\\b(SWRITE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # SYS function
    'match': '\\b(SYS(INFO)?)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # TAN function
    'match': '\\b(TAN)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # THEN command
    'match': '\\b(THEN)'
    'name': 'keyword.control.bebasic'
  }
  { # TICK function
    'match': '\\b(TICK)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # TILECOLL function
    'match': '\\b(TILECOLL)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # TYPE function
    'match': '\\b(TYPE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # VAL function
    'match': '\\b(VAL)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # VPEEK function
    'match': '\\b(VPEEK)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # VPOKE function
    'match': '\\b(VPOKE)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # VREG function
    'match': '\\b(VREG)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # VSYNC function
    'match': '\\b(VSYNC)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # WAIT function
    'match': '\\b(WAIT)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # WEND function
    'match': '\\b(WEND)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # WHILE function
    'match': '\\b(WHILE)\\b'
    'name': 'keyword.control.bebasic'
  }
  { # WINDOW function
    'match': '\\b(WINDOW)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # XYZZY function
    'match': '\\b(XYZZY)\\b'
    'name': 'entity.name.function.bebasic'
  }
  { # DOWN value
    'match': '\\b(DOWN)\\b'
    'name': 'entity.other.attribute-name.bebasic'
  }
  { # UP value
    'match': '\\b(UP)\\b'
    'name': 'entity.other.attribute-name.bebasic'
  }
  # { # LEFT value
  #   'match': '\\b(LEFT)\\b'
  #   'name': 'entity.other.attribute-name.bebasic'
  # }
  # { # RIGHT value
  #   'match': '\\b(RIGHT)\\b'
  #   'name': 'entity.other.attribute-name.bebasic'
  # }
  { # TILES value
    'match': '\\b(TILES)\\b'
    'name': 'entity.other.attribute-name.bebasic'
  }
  { # SIZE value
    'match': '\\b(SIZE)\\b'
    'name': 'entity.other.attribute-name.bebasic'
  }
  { # FLAGS value
    'match': '\\b(FLAGS)\\b'
    'name': 'entity.other.attribute-name.bebasic'
  }
  { # PATTERN value
    'match': '\\b(PATTERN)\\b'
    'name': 'entity.other.attribute-name.bebasic'
  }
  { # AS value
    'match': '\\b(AS)\\b'
    'name': 'keyword.other.bebasic'
  }
  { # ON value
  'match': '\\b(ON)\\b'
  'name': 'keyword.other.bebasic'
  }
  { # TO value
    'match': '\\b(TO)\\b'
    'name': 'keyword.other.bebasic'
  }
  { # UNTIL value
    'match': '\\b(UNTIL)\\b'
    'name': 'keyword.other.bebasic'
  }
  { # FN call
    'match': '\\b(FN)\\b'
    'name': 'keyword.other.bebasic'
  }
]
